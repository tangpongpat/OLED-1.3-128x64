#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>

#define OLED_RESET 4
Adafruit_SH1106 display(OLED_RESET);

#define NUM_IMAGES 2
#define IMAGE_WIDTH 50
#define IMAGE_HEIGHT 50

static const unsigned char PROGMEM logo1[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x32, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x30, 0x00, 0x00, 0x10, 0x01, 0x80, 0x0e, 0x18, 0x00, 0x00, 0x38, 0x01, 0xc0, 0x0f,
0x0c, 0x00, 0x00, 0x6c, 0x03, 0x60, 0x01, 0x86, 0x00, 0x00, 0x6c, 0x03, 0x60, 0x00, 0x46, 0x00,
0x00, 0x6c, 0x02, 0x60, 0x00, 0x66, 0x00, 0x00, 0x83, 0xfc, 0x30, 0x00, 0x46, 0x00, 0x00, 0xc0,
0x00, 0x30, 0x00, 0x66, 0x00, 0x00, 0x80, 0x00, 0x30, 0x00, 0x46, 0x00, 0x03, 0x00, 0x00, 0x0f,
0xff, 0x86, 0x00, 0x03, 0x10, 0x02, 0x07, 0xff, 0x0c, 0x00, 0x03, 0x18, 0x03, 0x00, 0x00, 0x18,
0x00, 0x07, 0x00, 0x80, 0x70, 0x00, 0x30, 0x00, 0x07, 0x01, 0xc0, 0x70, 0x00, 0x30, 0x00, 0x03,
0x03, 0x60, 0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00,
0x70, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00,
0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0,
0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc3, 0xc0, 0xff, 0xfe, 0x30, 0x00, 0x00, 0xc7, 0xe1, 0xff,
0xfe, 0x30, 0x00, 0x00, 0x8c, 0x11, 0x80, 0x66, 0x30, 0x00, 0x00, 0xdc, 0x1b, 0x80, 0x66, 0x70,
0x00, 0x00, 0x78, 0x0f, 0x00, 0x3d, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

static const unsigned char PROGMEM logo2[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
0x30, 0x00, 0x00, 0x18, 0x01, 0x80, 0x0e, 0x1c, 0x00, 0x00, 0x3c, 0x03, 0xe0, 0x01, 0x8e, 0x00,
0x00, 0x6c, 0x03, 0x60, 0x01, 0x86, 0x00, 0x00, 0x6c, 0x03, 0x60, 0x00, 0x46, 0x00, 0x00, 0xc7,
0xfc, 0x70, 0x00, 0x46, 0x00, 0x00, 0x83, 0xfc, 0x30, 0x00, 0x46, 0x00, 0x00, 0xc0, 0x00, 0x30,
0x00, 0x66, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xff, 0xc6, 0x00, 0x03, 0x00, 0x00, 0x0f, 0xff, 0x86,
0x00, 0x03, 0x18, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x18, 0x02, 0x00, 0x00, 0x38, 0x00, 0x07,
0x00, 0x80, 0x70, 0x00, 0x30, 0x00, 0x03, 0x03, 0x60, 0x00, 0x00, 0x30, 0x00, 0x03, 0x03, 0x60,
0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x30, 0x00,
0x30, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x30, 0x00,
0x00, 0x60, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x03, 0x00,
0x00, 0x00, 0x00, 0x58, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04, 0x3f, 0x81, 0xff,
0xfe, 0x16, 0x00, 0x04, 0x60, 0x63, 0x00, 0x6f, 0x86, 0x00, 0x04, 0xe0, 0x66, 0x00, 0x61, 0x8e,
0x00, 0x03, 0x80, 0x7c, 0x00, 0x3e, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

#if (SH1106_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SH1106.h!");
#endif
int currentImage = 0;

void setup() {
  Serial.begin(9600);
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  // init done
  
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();

  // draw a single pixel
  
  // text display tests
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("TANG");
  
  display.setTextColor(BLACK, WHITE); // 'inverted' text
  display.println(3.141592);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  
  display.display();
  delay(1000);

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(40, 10,  logo1, 50, 50, 1);
  display.display();

 
}

void loop() {
  if (digitalRead(2) == LOW) {
    currentImage++;
    if (currentImage > 1) {
      currentImage = 0;
    }
    display.clearDisplay();
    if (currentImage == 0) {
      display.drawBitmap(40, 10, logo1, 50, 50, 1);
    } else {
      // Add opening brace here
      display.drawBitmap(40, 10, logo2, 50, 50, 1);
    } // Add closing brace here
    display.display();
    delay(500);
  }
}